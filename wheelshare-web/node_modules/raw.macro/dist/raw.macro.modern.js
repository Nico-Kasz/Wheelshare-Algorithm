const e=require("path"),r=require("fs"),{createMacro:t}=require("babel-plugin-macros");function a(t,i,n,o=""){const s=i.map(i=>{if(Array.isArray(i))return t.objectProperty(t.stringLiteral(i[0]),a(t,i[1],e.join(n,i[0]),o));try{const e=o.startsWith(".")&&i.endsWith(o)?i:i+o,a=require.resolve("./"+e,{paths:[n]});return t.objectProperty(t.stringLiteral(i.replace(o,"")),t.stringLiteral(r.readFileSync(a,"utf-8")))}catch(e){return null}}).filter(Boolean);if(0===s.length)throw new Error(`Cannot resolve file ${o} in these directories: ${i.join(", ")}`);return t.objectExpression(s)}module.exports=t(function({references:t,state:i,babel:n}){let o={value:0};t.default.forEach(t=>{if("CallExpression"!==t.parentPath.type)throw new Error(`This is not supported: \`${t.findParent(n.types.isExpression).getSource()}\`. Please see the raw.macro documentation`);!function({referencePath:t,state:i,babel:n,usageCounter:o}){const s=n.types,l=t.parentPath,c=e.dirname(i.file.opts.filename);let u;const h=l.get("arguments")[0];switch(h.node.type){case"TemplateLiteral":{const{expressions:i,quasis:n}=h.node;if(0===i.length){u=n[0].value.raw;break}try{if(u=l.get("arguments")[0].evaluate().value,void 0!==u)break}catch(e){}if(""===n[0].value.raw)throw new Error("Invalid value, variable interpolation can't be at the start of template literal");if(i.length>2)throw new Error("Invalid value. You can only have 2 dynamic values max. 1 for directory name, 1 for file name.");const f="__raw_dynamic__"+o.value;o.value++;const d=i.map((e,r)=>{const t=r!==n.length-1&&h.node.quasis[r+1].value.raw.startsWith("/");return{name:e.name,isDirectory:t}}),p=e.join(c,n[0].value.raw),v=r.readdirSync(p).filter(t=>{try{return r.lstatSync(e.join(p,t)).isDirectory()===d[0].isDirectory}catch(e){return!1}}).flatMap(e=>d[0].isDirectory?e:e.endsWith(n[1].value.raw)?e.replace(n[1].value.raw,""):[]);return n.slice(1).forEach((t,a)=>{d[a].isDirectory&&v.forEach((i,o)=>{if(!t.tail){const t=e.join(p,i),s=r.readdirSync(t).filter(e=>e.endsWith(n[a+2].value.raw));v[o]=[i,s]}})}),function e(r){return r.parentPath?e(r.parentPath):r}(t).unshiftContainer("body",s.variableDeclaration("var",[s.variableDeclarator(s.identifier(f),a(s,v,p,n[n.length-1].value.raw))])),void l.replaceWith(s.expressionStatement(d.reduce((e,r)=>s.memberExpression(e,s.identifier(r.name),!0),s.identifier(f))))}case"StringLiteral":u=h.node.value}if(void 0===u)throw new Error(`There was a problem evaluating the value of the argument for the code: ${l.getSource()}. If the value is dynamic, please make sure that its value is statically deterministic.`);const f=require.resolve(u,{paths:[c]}),d=r.readFileSync(f,{encoding:"utf-8"});l.replaceWith(s.expressionStatement(s.stringLiteral(d)))}({referencePath:t,state:i,babel:n,usageCounter:o})})});
//# sourceMappingURL=raw.macro.modern.js.map
