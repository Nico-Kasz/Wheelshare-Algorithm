{"ast":null,"code":"import { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  KEY_EVENTS\n} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput {\n  constructor(element, callback) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = KEY_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.tabIndex = options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    const targetElement = event.target || event.srcElement;\n\n    if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n      return;\n    }\n\n    if (this.enableDownEvent && event.type === 'keydown') {\n      this.callback({\n        type: DOWN_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n\n    if (this.enableUpEvent && event.type === 'keyup') {\n      this.callback({\n        type: UP_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAoBA,SAAQA,iBAAR,QAAgC,cAAhC;AAEA,MAAM;AAACC;AAAD,IAAeD,iBAArB;AACA,MAAME,eAAe,GAAG,SAAxB;AACA,MAAMC,aAAa,GAAG,OAAtB;AAEA,eAAe,MAAMC,QAAN,CAAe;AAC5BC,aAAW,CAACC,OAAD,EAAUC,QAAV,EAAkC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA,SAAKC,OAAL,GAAeC,MAAM,CAACC,MAAPD,CAAc;AAACE,YAAM,EAAE;AAAT,KAAdF,EAA8BD,OAA9BC,CAAf;AACA,SAAKG,eAAL,GAAuB,KAAKJ,OAAL,CAAaG,MAApC;AACA,SAAKE,aAAL,GAAqB,KAAKL,OAAL,CAAaG,MAAlC;AAEA,SAAKG,MAAL,GAAcb,UAAU,CAACc,MAAXd,CAAkBO,OAAO,CAACM,MAARN,IAAkB,EAApCP,CAAd;AAEA,SAAKe,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AAEAX,WAAO,CAACY,QAARZ,GAAmBE,OAAO,CAACU,QAARV,IAAoB,CAAvCF;AACAA,WAAO,CAACa,KAARb,CAAcc,OAAdd,GAAwB,MAAxBA;AACA,SAAKQ,MAAL,CAAYO,OAAZ,CAAoBC,KAAK,IAAIhB,OAAO,CAACiB,gBAARjB,CAAyBgB,KAAzBhB,EAAgC,KAAKU,WAArCV,CAA7B;AACD;;AAEDkB,SAAO,GAAG;AACR,SAAKV,MAAL,CAAYO,OAAZ,CAAoBC,KAAK,IAAI,KAAKhB,OAAL,CAAamB,mBAAb,CAAiCH,KAAjC,EAAwC,KAAKN,WAA7C,CAA7B;AACD;;AAMDU,iBAAe,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAClC,QAAID,SAAS,KAAKzB,eAAlB,EAAmC;AACjC,WAAKU,eAAL,GAAuBgB,OAAvB;AACD;;AACD,QAAID,SAAS,KAAKxB,aAAlB,EAAiC;AAC/B,WAAKU,aAAL,GAAqBe,OAArB;AACD;AACF;;AAEDZ,aAAW,CAACM,KAAD,EAAQ;AAEjB,UAAMO,aAAa,GAAGP,KAAK,CAACQ,MAANR,IAAgBA,KAAK,CAACS,UAA5C;;AACA,QACGF,aAAa,CAACG,OAAdH,KAA0B,OAA1BA,IAAqCA,aAAa,CAACI,IAAdJ,KAAuB,MAA5DA,IACDA,aAAa,CAACG,OAAdH,KAA0B,UAF5B,EAGE;AACA;AACD;;AAED,QAAI,KAAKjB,eAAL,IAAwBU,KAAK,CAACW,IAANX,KAAe,SAA3C,EAAsD;AACpD,WAAKf,QAAL,CAAc;AACZ0B,YAAI,EAAE/B,eADM;AAEZgC,gBAAQ,EAAEZ,KAFE;AAGZa,WAAG,EAAEb,KAAK,CAACa,GAHC;AAIZL,cAAM,EAAER,KAAK,CAACQ;AAJF,OAAd;AAMD;;AAED,QAAI,KAAKjB,aAAL,IAAsBS,KAAK,CAACW,IAANX,KAAe,OAAzC,EAAkD;AAChD,WAAKf,QAAL,CAAc;AACZ0B,YAAI,EAAE9B,aADM;AAEZ+B,gBAAQ,EAAEZ,KAFE;AAGZa,WAAG,EAAEb,KAAK,CAACa,GAHC;AAIZL,cAAM,EAAER,KAAK,CAACQ;AAJF,OAAd;AAMD;AACF;;AA9D2B","names":["INPUT_EVENT_TYPES","KEY_EVENTS","DOWN_EVENT_TYPE","UP_EVENT_TYPE","KeyInput","constructor","element","callback","options","Object","assign","enable","enableDownEvent","enableUpEvent","events","concat","handleEvent","bind","tabIndex","style","outline","forEach","event","addEventListener","destroy","removeEventListener","enableEventType","eventType","enabled","targetElement","target","srcElement","tagName","type","srcEvent","key"],"sources":["../../../src/inputs/key-input.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {KEY_EVENTS} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\n\nexport default class KeyInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n\n    this.events = KEY_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    element.tabIndex = options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    // Ignore if focused on text input\n    const targetElement = event.target || event.srcElement;\n    if (\n      (targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||\n      targetElement.tagName === 'TEXTAREA'\n    ) {\n      return;\n    }\n\n    if (this.enableDownEvent && event.type === 'keydown') {\n      this.callback({\n        type: DOWN_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n\n    if (this.enableUpEvent && event.type === 'keyup') {\n      this.callback({\n        type: UP_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}