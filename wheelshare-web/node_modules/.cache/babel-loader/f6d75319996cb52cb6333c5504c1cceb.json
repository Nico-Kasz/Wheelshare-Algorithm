{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport MapState from './map-state';\nimport { LinearInterpolator } from './transition';\nimport TransitionManager, { TRANSITION_EVENTS } from './transition-manager';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport var LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\nvar DEFAULT_INERTIA = 300;\n\nvar INERTIA_EASING = function INERTIA_EASING(t) {\n  return 1 - (1 - t) * (1 - t);\n};\n\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar MapController = function () {\n  function MapController() {\n    var _this = this;\n\n    _classCallCheck(this, MapController);\n\n    _defineProperty(this, \"events\", []);\n\n    _defineProperty(this, \"scrollZoom\", true);\n\n    _defineProperty(this, \"dragPan\", true);\n\n    _defineProperty(this, \"dragRotate\", true);\n\n    _defineProperty(this, \"doubleClickZoom\", true);\n\n    _defineProperty(this, \"touchZoom\", true);\n\n    _defineProperty(this, \"touchRotate\", false);\n\n    _defineProperty(this, \"keyboard\", true);\n\n    _defineProperty(this, \"_interactionState\", {\n      isDragging: false\n    });\n\n    _defineProperty(this, \"_events\", {});\n\n    _defineProperty(this, \"_setInteractionState\", function (newState) {\n      Object.assign(_this._interactionState, newState);\n\n      if (_this.onStateChange) {\n        _this.onStateChange(_this._interactionState);\n      }\n    });\n\n    _defineProperty(this, \"_onTransition\", function (newViewport, oldViewport) {\n      _this.onViewportChange(newViewport, _this._interactionState, oldViewport);\n    });\n\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  _createClass(MapController, [{\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      this.mapState = this.getMapState();\n      var eventStartBlocked = this._eventStartBlocked;\n\n      switch (event.type) {\n        case 'panstart':\n          return eventStartBlocked ? false : this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return eventStartBlocked ? false : this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'tripanstart':\n          return eventStartBlocked ? false : this._onTriplePanStart(event);\n\n        case 'tripanmove':\n          return this._onTriplePan(event);\n\n        case 'tripanend':\n          return this._onTriplePanEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _event$offsetCenter = event.offsetCenter,\n          x = _event$offsetCenter.x,\n          y = _event$offsetCenter.y;\n      return [x, y];\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"blockEvents\",\n    value: function blockEvents(timeout) {\n      var _this2 = this;\n\n      var timer = setTimeout(function () {\n        if (_this2._eventStartBlocked === timer) {\n          _this2._eventStartBlocked = null;\n        }\n      }, timeout);\n      this._eventStartBlocked = timer;\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newMapState, extraProps, interactionState) {\n      var oldViewport = this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n\n      var newViewport = _objectSpread(_objectSpread({}, newMapState.getViewportProps()), extraProps);\n\n      var viewStateChanged = Object.keys(newViewport).some(function (key) {\n        return oldViewport[key] !== newViewport[key];\n      });\n      this._state = newMapState.getState();\n\n      this._setInteractionState(interactionState);\n\n      if (viewStateChanged) {\n        this.onViewportChange(newViewport, this._interactionState, oldViewport);\n      }\n    }\n  }, {\n    key: \"getMapState\",\n    value: function getMapState(overrides) {\n      return new MapState(_objectSpread(_objectSpread(_objectSpread({}, this.mapStateProps), this._state), overrides));\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._interactionState.isDragging;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var onViewportChange = options.onViewportChange,\n          onStateChange = options.onStateChange,\n          _options$eventManager = options.eventManager,\n          eventManager = _options$eventManager === void 0 ? this.eventManager : _options$eventManager,\n          _options$isInteractiv = options.isInteractive,\n          isInteractive = _options$isInteractiv === void 0 ? true : _options$isInteractiv,\n          _options$scrollZoom = options.scrollZoom,\n          scrollZoom = _options$scrollZoom === void 0 ? this.scrollZoom : _options$scrollZoom,\n          _options$dragPan = options.dragPan,\n          dragPan = _options$dragPan === void 0 ? this.dragPan : _options$dragPan,\n          _options$dragRotate = options.dragRotate,\n          dragRotate = _options$dragRotate === void 0 ? this.dragRotate : _options$dragRotate,\n          _options$doubleClickZ = options.doubleClickZoom,\n          doubleClickZoom = _options$doubleClickZ === void 0 ? this.doubleClickZoom : _options$doubleClickZ,\n          _options$touchZoom = options.touchZoom,\n          touchZoom = _options$touchZoom === void 0 ? this.touchZoom : _options$touchZoom,\n          _options$touchRotate = options.touchRotate,\n          touchRotate = _options$touchRotate === void 0 ? this.touchRotate : _options$touchRotate,\n          _options$keyboard = options.keyboard,\n          keyboard = _options$keyboard === void 0 ? this.keyboard : _options$keyboard;\n      this.onViewportChange = onViewportChange;\n      this.onStateChange = onStateChange;\n      var prevOptions = this.mapStateProps || {};\n      var dimensionChanged = prevOptions.height !== options.height || prevOptions.width !== options.width;\n      this.mapStateProps = options;\n\n      if (dimensionChanged) {\n        this.mapState = prevOptions;\n        this.updateViewport(new MapState(options));\n      }\n\n      this._transitionManager.processViewportChange(options);\n\n      if (this.eventManager !== eventManager) {\n        this.eventManager = eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this3 = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this3._events[eventName] !== enabled) {\n            _this3._events[eventName] = enabled;\n\n            if (enabled) {\n              _this3.eventManager.on(eventName, _this3.handleEvent);\n            } else {\n              _this3.eventManager.off(eventName, _this3.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n      this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n      var newMapState = this._panRotate ? this.mapState.rotateStart({\n        pos: pos\n      }) : this.mapState.panStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.pan({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isPanning: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanMoveEnd\",\n    value: function _onPanMoveEnd(event) {\n      if (this.dragPan) {\n        var _this$dragPan$inertia = this.dragPan.inertia,\n            inertia = _this$dragPan$inertia === void 0 ? DEFAULT_INERTIA : _this$dragPan$inertia;\n\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.pan({\n            pos: endPos\n          }).panEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: true\n          });\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPanRotateEnd\",\n    value: function _onPanRotateEnd(event) {\n      if (this.dragRotate) {\n        var _this$dragRotate$iner = this.dragRotate.inertia,\n            inertia = _this$dragRotate$iner === void 0 ? DEFAULT_INERTIA : _this$dragRotate$iner;\n\n        if (inertia && event.velocity) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0] + event.velocityX * inertia / 2, pos[1] + event.velocityY * inertia / 2];\n          var newControllerState = this.mapState.rotate({\n            pos: endPos\n          }).rotateEnd();\n          this.updateViewport(newControllerState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.panEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      var _this$scrollZoom = this.scrollZoom,\n          _this$scrollZoom$spee = _this$scrollZoom.speed,\n          speed = _this$scrollZoom$spee === void 0 ? 0.01 : _this$scrollZoom$spee,\n          _this$scrollZoom$smoo = _this$scrollZoom.smooth,\n          smooth = _this$scrollZoom$smoo === void 0 ? false : _this$scrollZoom$smoo;\n      event.preventDefault();\n      var pos = this.getCenter(event);\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: scale\n      });\n\n      if (newMapState.getViewportProps().zoom === this.mapStateProps.zoom) {\n        return false;\n      }\n\n      this.updateViewport(newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        }),\n        transitionDuration: smooth ? 250 : 1\n      }), {\n        isPanning: true,\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._startPinchRotation = event.rotation;\n      this._lastPinchEvent = event;\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      var newMapState = this.mapState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newMapState = newMapState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        newMapState = newMapState.rotate({\n          deltaAngleX: this._startPinchRotation - rotation\n        });\n      }\n\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true,\n        isPanning: Boolean(this.touchZoom),\n        isZooming: Boolean(this.touchZoom),\n        isRotating: Boolean(this.touchRotate)\n      });\n      this._lastPinchEvent = event;\n      return true;\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (this.touchZoom) {\n        var _this$touchZoom$inert = this.touchZoom.inertia,\n            inertia = _this$touchZoom$inert === void 0 ? DEFAULT_INERTIA : _this$touchZoom$inert;\n        var _lastPinchEvent = this._lastPinchEvent;\n\n        if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n          var pos = this.getCenter(event);\n\n          var _newMapState = this.mapState.rotateEnd();\n\n          var z = Math.log2(event.scale);\n\n          var velocityZ = (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n\n          var endScale = Math.pow(2, z + velocityZ * inertia / 2);\n          _newMapState = _newMapState.zoom({\n            pos: pos,\n            scale: endScale\n          }).zoomEnd();\n          this.updateViewport(_newMapState, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionInterpolator: new LinearInterpolator({\n              around: pos\n            }),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          });\n          this.blockEvents(inertia);\n          return true;\n        }\n      }\n\n      var newMapState = this.mapState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isPanning: false,\n        isZooming: false,\n        isRotating: false\n      });\n      this._startPinchRotation = null;\n      this._lastPinchEvent = null;\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanStart\",\n    value: function _onTriplePanStart(event) {\n      var pos = this.getCenter(event);\n      var newMapState = this.mapState.rotateStart({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePan\",\n    value: function _onTriplePan(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (!this.touchRotate) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      pos[0] -= event.deltaX;\n      var newMapState = this.mapState.rotate({\n        pos: pos\n      });\n      this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n        isRotating: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onTriplePanEnd\",\n    value: function _onTriplePanEnd(event) {\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      if (this.touchRotate) {\n        var _this$touchRotate$ine = this.touchRotate.inertia,\n            inertia = _this$touchRotate$ine === void 0 ? DEFAULT_INERTIA : _this$touchRotate$ine;\n\n        if (inertia && event.velocityY) {\n          var pos = this.getCenter(event);\n          var endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];\n\n          var _newMapState2 = this.mapState.rotate({\n            pos: endPos\n          });\n\n          this.updateViewport(_newMapState2, _objectSpread(_objectSpread({}, LINEAR_TRANSITION_PROPS), {}, {\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          }), {\n            isDragging: false,\n            isRotating: true\n          });\n          this.blockEvents(inertia);\n          return false;\n        }\n      }\n\n      var newMapState = this.mapState.rotateEnd();\n      this.updateViewport(newMapState, null, {\n        isDragging: false,\n        isRotating: false\n      });\n      return true;\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newMapState = this.mapState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({\n          around: pos\n        })\n      }), {\n        isZooming: true\n      });\n      return true;\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var _this$keyboard = this.keyboard,\n          _this$keyboard$zoomSp = _this$keyboard.zoomSpeed,\n          zoomSpeed = _this$keyboard$zoomSp === void 0 ? 2 : _this$keyboard$zoomSp,\n          _this$keyboard$moveSp = _this$keyboard.moveSpeed,\n          moveSpeed = _this$keyboard$moveSp === void 0 ? 100 : _this$keyboard$moveSp,\n          _this$keyboard$rotate = _this$keyboard.rotateSpeedX,\n          rotateSpeedX = _this$keyboard$rotate === void 0 ? 15 : _this$keyboard$rotate,\n          _this$keyboard$rotate2 = _this$keyboard.rotateSpeedY,\n          rotateSpeedY = _this$keyboard$rotate2 === void 0 ? 10 : _this$keyboard$rotate2;\n      var mapStateProps = this.mapStateProps;\n      var newMapState;\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom - Math.log2(zoomSpeed)\n            });\n          }\n\n          break;\n\n        case 187:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1\n            });\n          } else {\n            newMapState = this.getMapState({\n              zoom: mapStateProps.zoom + Math.log2(zoomSpeed)\n            });\n          }\n\n          break;\n\n        case 37:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing - rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 39:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              bearing: mapStateProps.bearing + rotateSpeedX\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [-moveSpeed, 0],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 38:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch + rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        case 40:\n          if (funcKey) {\n            newMapState = this.getMapState({\n              pitch: mapStateProps.pitch - rotateSpeedY\n            });\n          } else {\n            newMapState = this.mapState.pan({\n              pos: [0, -moveSpeed],\n              startPos: [0, 0]\n            });\n          }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n    }\n  }]);\n\n  return MapController;\n}();\n\nexport { MapController as default };","map":{"version":3,"mappings":"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","names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","DEFAULT_INERTIA","INERTIA_EASING","EVENT_TYPES","WHEEL","PAN","PINCH","TRIPLE_PAN","DOUBLE_TAP","KEYBOARD","MapController","_classCallCheck","_defineProperty","isDragging","Object","assign","_this","_interactionState","newState","onStateChange","newViewport","oldViewport","onViewportChange","handleEvent","bind","_transitionManager","_onTransition","_setInteractionState","event","mapState","getMapState","eventStartBlocked","_eventStartBlocked","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onTriplePanStart","_onTriplePan","_onTriplePanEnd","_onDoubleTap","_onWheel","_onKeyDown","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","timeout","timer","setTimeout","_this2","newMapState","extraProps","interactionState","getViewportProps","viewStateChanged","keys","some","key","_state","getState","overrides","mapStateProps","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","prevOptions","dimensionChanged","height","width","updateViewport","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","_this3","eventName","on","off","pos","getCenter","_panRotate","isFunctionKeyPressed","rightButton","rotateStart","panStart","_onPanRotate","_onPanMove","_onPanRotateEnd","_onPanMoveEnd","pan","isPanning","inertia","velocity","endPos","velocityX","velocityY","newControllerState","panEnd","rotate","isRotating","rotateEnd","speed","smooth","preventDefault","delta","scale","Math","exp","abs","zoom","around","isZooming","zoomStart","_startPinchRotation","rotation","_lastPinchEvent","deltaAngleX","z","log2","velocityZ","deltaTime","endScale","pow","zoomEnd","blockEvents","startPinchRotation","deltaX","isZoomOut","funcKey","zoomSpeed","moveSpeed","rotateSpeedX","rotateSpeedY","keyCode","bearing","startPos","pitch"],"sources":["../../../src/utils/map-controller.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable complexity, max-statements */\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nexport const LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst DEFAULT_INERTIA = 300;\nconst INERTIA_EASING = t => 1 - (1 - t) * (1 - t);\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  TRIPLE_PAN: ['tripanstart', 'tripanmove', 'tripanend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n  events = [];\n  scrollZoom = true;\n  dragPan = true;\n  dragRotate = true;\n  doubleClickZoom = true;\n  touchZoom = true;\n  touchRotate = false;\n  keyboard = true;\n\n  _interactionState = {\n    isDragging: false\n  };\n  _events = {};\n\n  constructor() {\n    this.handleEvent = this.handleEvent.bind(this);\n    this._transitionManager = new TransitionManager({\n      onViewportChange: this._onTransition,\n      onStateChange: this._setInteractionState\n    });\n  }\n\n  /**\n   * Callback for events\n   * @param {object} event - a mjolnir.js Event\n   */\n  handleEvent(event) {\n    this.mapState = this.getMapState();\n    const eventStartBlocked = this._eventStartBlocked;\n\n    switch (event.type) {\n      case 'panstart':\n        return eventStartBlocked ? false : this._onPanStart(event);\n      case 'panmove':\n        return this._onPan(event);\n      case 'panend':\n        return this._onPanEnd(event);\n      case 'pinchstart':\n        return eventStartBlocked ? false : this._onPinchStart(event);\n      case 'pinchmove':\n        return this._onPinch(event);\n      case 'pinchend':\n        return this._onPinchEnd(event);\n      case 'tripanstart':\n        return eventStartBlocked ? false : this._onTriplePanStart(event);\n      case 'tripanmove':\n        return this._onTriplePan(event);\n      case 'tripanend':\n        return this._onTriplePanEnd(event);\n      case 'doubletap':\n        return this._onDoubleTap(event);\n      case 'wheel':\n        return this._onWheel(event);\n      case 'keydown':\n        return this._onKeyDown(event);\n      default:\n        return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event) {\n    const {\n      offsetCenter: {x, y}\n    } = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event) {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.\n  // This triggers a brief `pan` event.\n  // Calling this method will temporarily disable *start events to avoid conflicting transitions.\n  blockEvents(timeout) {\n    /* global setTimeout */\n    const timer = setTimeout(() => {\n      if (this._eventStartBlocked === timer) {\n        this._eventStartBlocked = null;\n      }\n    }, timeout);\n    this._eventStartBlocked = timer;\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState, extraProps, interactionState) {\n    // Always trigger callback on initial update (resize)\n    const oldViewport =\n      this.mapState instanceof MapState ? this.mapState.getViewportProps() : this.mapState;\n    const newViewport = {...newMapState.getViewportProps(), ...extraProps};\n\n    const viewStateChanged = Object.keys(newViewport).some(\n      key => oldViewport[key] !== newViewport[key]\n    );\n\n    this._state = newMapState.getState();\n    this._setInteractionState(interactionState);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, this._interactionState, oldViewport);\n    }\n  }\n\n  _setInteractionState = newState => {\n    Object.assign(this._interactionState, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._interactionState);\n    }\n  };\n\n  _onTransition = (newViewport, oldViewport) => {\n    this.onViewportChange(newViewport, this._interactionState, oldViewport);\n  };\n\n  getMapState(overrides) {\n    return new MapState({...this.mapStateProps, ...this._state, ...overrides});\n  }\n\n  isDragging() {\n    return this._interactionState.isDragging;\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    const prevOptions = this.mapStateProps || {};\n    const dimensionChanged =\n      prevOptions.height !== options.height || prevOptions.width !== options.width;\n\n    this.mapStateProps = options;\n\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props and fire change event\n      this.mapState = prevOptions;\n      this.updateViewport(new MapState(options));\n    }\n    // Update transition\n    this._transitionManager.processViewportChange(options);\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && Boolean(scrollZoom));\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && Boolean(dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && Boolean(touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.TRIPLE_PAN, isInteractive && Boolean(touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && Boolean(doubleClickZoom));\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && Boolean(keyboard));\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames, enabled) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event) {\n    const pos = this.getCenter(event);\n    this._panRotate = this.isFunctionKeyPressed(event) || event.rightButton;\n    const newMapState = this._panRotate\n      ? this.mapState.rotateStart({pos})\n      : this.mapState.panStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    return this._panRotate ? this._onPanRotateEnd(event) : this._onPanMoveEnd(event);\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  _onPanMoveEnd(event) {\n    if (this.dragPan) {\n      const {inertia = DEFAULT_INERTIA} = this.dragPan;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.pan({pos: endPos}).panEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onPanRotateEnd(event) {\n    if (this.dragRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.dragRotate;\n      if (inertia && event.velocity) {\n        const pos = this.getCenter(event);\n        const endPos = [\n          pos[0] + (event.velocityX * inertia) / 2,\n          pos[1] + (event.velocityY * inertia) / 2\n        ];\n        const newControllerState = this.mapState.rotate({pos: endPos}).rotateEnd();\n        this.updateViewport(\n          newControllerState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        return true;\n      }\n    }\n    const newMapState = this.mapState.panEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    const {speed = 0.01, smooth = false} = this.scrollZoom;\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * speed)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    if (newMapState.getViewportProps().zoom === this.mapStateProps.zoom) {\n      return false;\n    }\n\n    this.updateViewport(\n      newMapState,\n      {\n        ...LINEAR_TRANSITION_PROPS,\n        transitionInterpolator: new LinearInterpolator({around: pos}),\n        transitionDuration: smooth ? 250 : 1\n      },\n      {\n        isPanning: true,\n        isZooming: true\n      }\n    );\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._startPinchRotation = event.rotation;\n    this._lastPinchEvent = event;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      newMapState = newMapState.rotate({\n        deltaAngleX: this._startPinchRotation - rotation\n      });\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: Boolean(this.touchZoom),\n      isZooming: Boolean(this.touchZoom),\n      isRotating: Boolean(this.touchRotate)\n    });\n    this._lastPinchEvent = event;\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchZoom) {\n      const {inertia = DEFAULT_INERTIA} = this.touchZoom;\n      const {_lastPinchEvent} = this;\n      if (inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {\n        const pos = this.getCenter(event);\n        let newMapState = this.mapState.rotateEnd();\n        const z = Math.log2(event.scale);\n        const velocityZ =\n          (z - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);\n        const endScale = Math.pow(2, z + (velocityZ * inertia) / 2);\n        newMapState = newMapState.zoom({pos, scale: endScale}).zoomEnd();\n\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionInterpolator: new LinearInterpolator({around: pos}),\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isPanning: Boolean(this.touchZoom),\n            isZooming: Boolean(this.touchZoom),\n            isRotating: false\n          }\n        );\n        this.blockEvents(inertia);\n        return true;\n      }\n    }\n\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    this._startPinchRotation = null;\n    this._lastPinchEvent = null;\n    return true;\n  }\n\n  _onTriplePanStart(event) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  _onTriplePan(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (!this.touchRotate) {\n      return false;\n    }\n\n    const pos = this.getCenter(event);\n    pos[0] -= event.deltaX;\n\n    const newMapState = this.mapState.rotate({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  _onTriplePanEnd(event) {\n    if (!this.isDragging()) {\n      return false;\n    }\n    if (this.touchRotate) {\n      const {inertia = DEFAULT_INERTIA} = this.touchRotate;\n      if (inertia && event.velocityY) {\n        const pos = this.getCenter(event);\n        const endPos = [pos[0], (pos[1] += (event.velocityY * inertia) / 2)];\n        const newMapState = this.mapState.rotate({pos: endPos});\n        this.updateViewport(\n          newMapState,\n          {\n            ...LINEAR_TRANSITION_PROPS,\n            transitionDuration: inertia,\n            transitionEasing: INERTIA_EASING\n          },\n          {\n            isDragging: false,\n            isRotating: true\n          }\n        );\n        this.blockEvents(inertia);\n        return false;\n      }\n    }\n    const newMapState = this.mapState.rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(\n      newMapState,\n      Object.assign({}, LINEAR_TRANSITION_PROPS, {\n        transitionInterpolator: new LinearInterpolator({around: pos})\n      }),\n      {isZooming: true}\n    );\n    return true;\n  }\n\n  // Default handler for the `keydown` event\n  _onKeyDown(event) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {zoomSpeed = 2, moveSpeed = 100, rotateSpeedX = 15, rotateSpeedY = 10} = this.keyboard;\n\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n      case 189: // -\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed) - 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom - Math.log2(zoomSpeed)});\n        }\n        break;\n      case 187: // +\n        if (funcKey) {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed) + 1});\n        } else {\n          newMapState = this.getMapState({zoom: mapStateProps.zoom + Math.log2(zoomSpeed)});\n        }\n        break;\n      case 37: // left\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing - rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 39: // right\n        if (funcKey) {\n          newMapState = this.getMapState({\n            bearing: mapStateProps.bearing + rotateSpeedX\n          });\n        } else {\n          newMapState = this.mapState.pan({pos: [-moveSpeed, 0], startPos: [0, 0]});\n        }\n        break;\n      case 38: // up\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch + rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      case 40: // down\n        if (funcKey) {\n          newMapState = this.getMapState({pitch: mapStateProps.pitch - rotateSpeedY});\n        } else {\n          newMapState = this.mapState.pan({pos: [0, -moveSpeed], startPos: [0, 0]});\n        }\n        break;\n      default:\n        return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}