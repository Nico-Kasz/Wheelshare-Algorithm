{"ast":null,"code":"const DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\nexport function whichButtons(event) {\n  const eventType = MOUSE_EVENTS[event.srcEvent.type];\n\n  if (!eventType) {\n    return null;\n  }\n\n  const {\n    buttons,\n    button,\n    which\n  } = event.srcEvent;\n  let leftButton = false;\n  let middleButton = false;\n  let rightButton = false;\n\n  if (eventType === UP_EVENT || eventType === MOVE_EVENT && !Number.isFinite(buttons)) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {\n    leftButton,\n    middleButton,\n    rightButton\n  };\n}\nexport function getOffsetPosition(event, rootElement) {\n  const {\n    srcEvent\n  } = event;\n\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    return null;\n  }\n\n  const center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n  const rect = rootElement.getBoundingClientRect();\n  const scaleX = rect.width / rootElement.offsetWidth || 1;\n  const scaleY = rect.height / rootElement.offsetHeight || 1;\n  const offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n  return {\n    center,\n    offsetCenter\n  };\n}","map":{"version":3,"mappings":"AACA,MAAMA,UAAU,GAAG,CAAnB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,YAAY,GAAG;AACnBC,aAAW,EAAEJ,UADM;AAEnBK,aAAW,EAAEJ,UAFM;AAGnBK,WAAS,EAAEJ,QAHQ;AAInBK,WAAS,EAAEP,UAJQ;AAKnBQ,WAAS,EAAEP,UALQ;AAMnBQ,SAAO,EAAEP;AANU,CAArB;AAUA,MAAMQ,sBAAsB,GAAG,CAA/B;AACA,MAAMC,wBAAwB,GAAG,CAAjC;AACA,MAAMC,uBAAuB,GAAG,CAAhC;AAEA,MAAMC,uBAAuB,GAAG,CAAhC;AACA,MAAMC,yBAAyB,GAAG,CAAlC;AACA,MAAMC,wBAAwB,GAAG,CAAjC;AAEA,MAAMC,6BAA6B,GAAG,CAAtC;AACA,MAAMC,8BAA8B,GAAG,CAAvC;AACA,MAAMC,+BAA+B,GAAG,CAAxC;AAKA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,QAAMC,SAAS,GAAGlB,YAAY,CAACiB,KAAK,CAACE,QAANF,CAAeG,IAAhB,CAA9B;;AACA,MAAI,CAACF,SAAL,EAAgB;AAEd,WAAO,IAAP;AACD;;AAED,QAAM;AAACG,WAAD;AAAUC,UAAV;AAAkBC;AAAlB,MAA2BN,KAAK,CAACE,QAAvC;AACA,MAAIK,UAAU,GAAG,KAAjB;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,MAEER,SAAS,KAAKnB,QAAdmB,IAECA,SAAS,KAAKpB,UAAdoB,IAA4B,CAACS,MAAM,CAACC,QAAPD,CAAgBN,OAAhBM,CAJhC,EAKE;AACAH,cAAU,GAAGD,KAAK,KAAKhB,sBAAvBiB;AACAC,gBAAY,GAAGF,KAAK,KAAKf,wBAAzBiB;AACAC,eAAW,GAAGH,KAAK,KAAKd,uBAAxBiB;AARF,SASO,IAAIR,SAAS,KAAKpB,UAAlB,EAA8B;AACnC0B,cAAU,GAAGK,OAAO,CAACR,OAAO,GAAGR,6BAAX,CAApBW;AACAC,gBAAY,GAAGI,OAAO,CAACR,OAAO,GAAGN,+BAAX,CAAtBU;AACAC,eAAW,GAAGG,OAAO,CAACR,OAAO,GAAGP,8BAAX,CAArBY;AAHK,SAIA,IAAIR,SAAS,KAAKrB,UAAlB,EAA8B;AACnC2B,cAAU,GAAGF,MAAM,KAAKZ,uBAAxBc;AACAC,gBAAY,GAAGH,MAAM,KAAKX,yBAA1Bc;AACAC,eAAW,GAAGJ,MAAM,KAAKV,wBAAzBc;AACD;;AAED,SAAO;AAACF,cAAD;AAAaC,gBAAb;AAA2BC;AAA3B,GAAP;AACD;AAKD,OAAO,SAASI,iBAAT,CAA2Bb,KAA3B,EAAkCc,WAAlC,EAA+C;AACpD,QAAM;AAACZ;AAAD,MAAaF,KAAnB;;AAGA,MAAI,CAACA,KAAK,CAACe,MAAP,IAAiB,CAACL,MAAM,CAACC,QAAPD,CAAgBR,QAAQ,CAACc,OAAzBN,CAAtB,EAAyD;AAEvD,WAAO,IAAP;AACD;;AAED,QAAMK,MAAM,GAAGf,KAAK,CAACe,MAANf,IAAgB;AAC7BiB,KAAC,EAAEf,QAAQ,CAACc,OADiB;AAE7BE,KAAC,EAAEhB,QAAQ,CAACiB;AAFiB,GAA/B;AAKA,QAAMC,IAAI,GAAGN,WAAW,CAACO,qBAAZP,EAAb;AAIA,QAAMQ,MAAM,GAAGF,IAAI,CAACG,KAALH,GAAaN,WAAW,CAACU,WAAzBJ,IAAwC,CAAvD;AACA,QAAMK,MAAM,GAAGL,IAAI,CAACM,MAALN,GAAcN,WAAW,CAACa,YAA1BP,IAA0C,CAAzD;AAGA,QAAMQ,YAAY,GAAG;AACnBX,KAAC,EAAE,CAACF,MAAM,CAACE,CAAPF,GAAWK,IAAI,CAACS,IAAhBd,GAAuBD,WAAW,CAACgB,UAApC,IAAkDR,MADlC;AAEnBJ,KAAC,EAAE,CAACH,MAAM,CAACG,CAAPH,GAAWK,IAAI,CAACW,GAAhBhB,GAAsBD,WAAW,CAACkB,SAAnC,IAAgDP;AAFhC,GAArB;AAKA,SAAO;AAACV,UAAD;AAASa;AAAT,GAAP;AACD","names":["DOWN_EVENT","MOVE_EVENT","UP_EVENT","MOUSE_EVENTS","pointerdown","pointermove","pointerup","mousedown","mousemove","mouseup","MOUSE_EVENT_WHICH_LEFT","MOUSE_EVENT_WHICH_MIDDLE","MOUSE_EVENT_WHICH_RIGHT","MOUSE_EVENT_BUTTON_LEFT","MOUSE_EVENT_BUTTON_MIDDLE","MOUSE_EVENT_BUTTON_RIGHT","MOUSE_EVENT_BUTTONS_LEFT_MASK","MOUSE_EVENT_BUTTONS_RIGHT_MASK","MOUSE_EVENT_BUTTONS_MIDDLE_MASK","whichButtons","event","eventType","srcEvent","type","buttons","button","which","leftButton","middleButton","rightButton","Number","isFinite","Boolean","getOffsetPosition","rootElement","center","clientX","x","y","clientY","rect","getBoundingClientRect","scaleX","width","offsetWidth","scaleY","height","offsetHeight","offsetCenter","left","clientLeft","top","clientTop"],"sources":["../../../src/utils/event-utils.js"],"sourcesContent":["/* Constants */\nconst DOWN_EVENT = 1;\nconst MOVE_EVENT = 2;\nconst UP_EVENT = 4;\nconst MOUSE_EVENTS = {\n  pointerdown: DOWN_EVENT,\n  pointermove: MOVE_EVENT,\n  pointerup: UP_EVENT,\n  mousedown: DOWN_EVENT,\n  mousemove: MOVE_EVENT,\n  mouseup: UP_EVENT\n};\n\n// MouseEvent.which https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/which\nconst MOUSE_EVENT_WHICH_LEFT = 1;\nconst MOUSE_EVENT_WHICH_MIDDLE = 2;\nconst MOUSE_EVENT_WHICH_RIGHT = 3;\n// MouseEvent.button https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\nconst MOUSE_EVENT_BUTTON_LEFT = 0;\nconst MOUSE_EVENT_BUTTON_MIDDLE = 1;\nconst MOUSE_EVENT_BUTTON_RIGHT = 2;\n// MouseEvent.buttons https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\nconst MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;\nconst MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;\nconst MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;\n\n/**\n * Extract the involved mouse button\n */\nexport function whichButtons(event) {\n  const eventType = MOUSE_EVENTS[event.srcEvent.type];\n  if (!eventType) {\n    // Not a mouse evet\n    return null;\n  }\n\n  const {buttons, button, which} = event.srcEvent;\n  let leftButton = false;\n  let middleButton = false;\n  let rightButton = false;\n\n  if (\n    // button is up, need to find out which one was pressed before\n    eventType === UP_EVENT ||\n    // moving but does not support `buttons` API\n    (eventType === MOVE_EVENT && !Number.isFinite(buttons))\n  ) {\n    leftButton = which === MOUSE_EVENT_WHICH_LEFT;\n    middleButton = which === MOUSE_EVENT_WHICH_MIDDLE;\n    rightButton = which === MOUSE_EVENT_WHICH_RIGHT;\n  } else if (eventType === MOVE_EVENT) {\n    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);\n    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);\n    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);\n  } else if (eventType === DOWN_EVENT) {\n    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;\n    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;\n    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;\n  }\n\n  return {leftButton, middleButton, rightButton};\n}\n\n/**\n * Calculate event position relative to the root element\n */\nexport function getOffsetPosition(event, rootElement) {\n  const {srcEvent} = event;\n\n  // `center` is a hammer.js event property\n  if (!event.center && !Number.isFinite(srcEvent.clientX)) {\n    // Not a gestural event\n    return null;\n  }\n\n  const center = event.center || {\n    x: srcEvent.clientX,\n    y: srcEvent.clientY\n  };\n\n  const rect = rootElement.getBoundingClientRect();\n\n  // Fix scale for map affected by a CSS transform.\n  // See https://stackoverflow.com/a/26893663/3528533\n  const scaleX = rect.width / rootElement.offsetWidth || 1;\n  const scaleY = rect.height / rootElement.offsetHeight || 1;\n\n  // Calculate center relative to the root element\n  const offsetCenter = {\n    x: (center.x - rect.left - rootElement.clientLeft) / scaleX,\n    y: (center.y - rect.top - rootElement.clientTop) / scaleY\n  };\n\n  return {center, offsetCenter};\n}\n"]},"metadata":{},"sourceType":"module"}