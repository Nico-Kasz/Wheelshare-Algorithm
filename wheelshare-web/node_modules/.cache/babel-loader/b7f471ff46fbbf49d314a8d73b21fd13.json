{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useEffect, useCallback, useState, useRef, useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  var control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  control._updateAttributions();\n\n  control._updateEditLink();\n\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  var _useMapControl = useMapControl(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var innerContainerRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showCompact = _useState2[0],\n      setShowCompact = _useState2[1];\n\n  useEffect(function () {\n    var control;\n\n    if (context.map) {\n      control = setupAttributioncontrol({\n        customAttribution: props.customAttribution\n      }, context.map, containerRef.current, innerContainerRef.current);\n    }\n\n    return function () {\n      return control && removeAttributionControl(control);\n    };\n  }, [context.map]);\n  var compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n  useEffect(function () {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n  var toggleAttribution = useCallback(function () {\n    return setShowCompact(function (value) {\n      return !value;\n    });\n  }, []);\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: props.className\n  }, React.createElement(\"div\", {\n    ref: containerRef,\n    \"aria-pressed\": showCompact,\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-attrib \".concat(compact ? 'mapboxgl-compact' : '', \" \").concat(showCompact ? 'mapboxgl-compact-show' : '')\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"mapboxgl-ctrl-attrib-button\",\n    title: props.toggleLabel,\n    onClick: toggleAttribution\n  }), React.createElement(\"div\", {\n    ref: innerContainerRef,\n    className: \"mapboxgl-ctrl-attrib-inner\",\n    role: \"list\"\n  })));\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\nexport default React.memo(AttributionControl);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,OAAlD,QAAgE,OAAhE;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,aAAP,IAAuBC,sBAAvB,EAA+CC,mBAA/C,QAAyE,mBAAzE;AAEA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBF,mBAAlBE,EAAuC;AACvDE,aAAW,EAAER,SAAS,CAACS,MADgC;AAEvDC,WAAS,EAAEV,SAAS,CAACS,MAFkC;AAGvDE,OAAK,EAAEX,SAAS,CAACY,MAHsC;AAIvDC,SAAO,EAAEb,SAAS,CAACc,IAJoC;AAKvDC,mBAAiB,EAAEf,SAAS,CAACgB,SAAVhB,CAAoB,CAACA,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACiB,OAAVjB,CAAkBA,SAAS,CAACS,MAA5BT,CAAnB,CAApBA;AALoC,CAAvCM,CAAlB;AAQA,IAAMY,YAAY,GAAGZ,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBH,sBAAlBG,EAA0C;AAC7DI,WAAS,EAAE,EADkD;AAE7DF,aAAW,EAAE;AAFgD,CAA1CF,CAArB;;AAKA,SAASa,uBAAT,CAAiCC,IAAjC,EAAuCC,GAAvC,EAA4CC,SAA5C,EAAuDC,oBAAvD,EAA6E;AAC3E,MAAMC,OAAO,GAAG,IAAIvB,QAAQ,CAACwB,kBAAb,CAAgCL,IAAhC,CAAhB;AACAI,SAAO,CAACE,IAARF,GAAeH,GAAfG;AACAA,SAAO,CAACG,UAARH,GAAqBF,SAArBE;AACAA,SAAO,CAACI,eAARJ,GAA0BD,oBAA1BC;;AAGAA,SAAO,CAACK,mBAARL;;AACAA,SAAO,CAACM,eAARN;;AACAH,KAAG,CAACU,EAAJV,CAAO,WAAPA,EAAoBG,OAAO,CAACQ,WAA5BX;AACAA,KAAG,CAACU,EAAJV,CAAO,YAAPA,EAAqBG,OAAO,CAACQ,WAA7BX;AAEA,SAAOG,OAAP;AACD;;AAED,SAASS,wBAAT,CAAkCT,OAAlC,EAA2C;AACzCA,SAAO,CAACE,IAARF,CAAaU,GAAbV,CAAiB,WAAjBA,EAA8BA,OAAO,CAACQ,WAAtCR;;AACAA,SAAO,CAACE,IAARF,CAAaU,GAAbV,CAAiB,YAAjBA,EAA+BA,OAAO,CAACQ,WAAvCR;AACD;;AAED,SAASC,kBAAT,CAA4BU,KAA5B,EAAmC;AAAA,uBACDjC,aAAa,CAACiC,KAAD,CADZ;AAAA,MAC1BC,OAD0B,kBAC1BA,OAD0B;AAAA,MACjBC,YADiB,kBACjBA,YADiB;;AAEjC,MAAMC,iBAAiB,GAAGxC,MAAM,CAAC,IAAD,CAAhC;;AAFiC,kBAGKD,QAAQ,CAAC,KAAD,CAHb;AAAA;AAAA,MAG1B0C,WAH0B;AAAA,MAGbC,cAHa;;AAKjC7C,WAAS,CAAC,YAAM;AACd,QAAI6B,OAAJ;;AACA,QAAIY,OAAO,CAACf,GAAZ,EAAiB;AACfG,aAAO,GAAGL,uBAAuB,CAC/B;AACEJ,yBAAiB,EAAEoB,KAAK,CAACpB;AAD3B,OAD+B,EAI/BqB,OAAO,CAACf,GAJuB,EAK/BgB,YAAY,CAACI,OALkB,EAM/BH,iBAAiB,CAACG,OANa,CAAjCjB;AAQD;;AAED,WAAO;AAAA,aAAMA,OAAO,IAAIS,wBAAwB,CAACT,OAAD,CAAzC;AAAP;AAbO,KAcN,CAACY,OAAO,CAACf,GAAT,CAdM,CAAT1B;AAgBA,MAAMkB,OAAO,GAAGsB,KAAK,CAACtB,OAANsB,KAAkBO,SAAlBP,GAA8BC,OAAO,CAACO,QAARP,CAAiBQ,KAAjBR,IAA0B,GAAxDD,GAA8DA,KAAK,CAACtB,OAApF;AAEAlB,WAAS,CAAC,YAAM;AACd,QAAI,CAACkB,OAAD,IAAY0B,WAAhB,EAA6B;AAC3BC,oBAAc,CAAC,KAAD,CAAdA;AACD;AAHM,KAIN,CAAC3B,OAAD,CAJM,CAATlB;AAMA,MAAMkD,iBAAiB,GAAGjD,WAAW,CAAC;AAAA,WAAM4C,cAAc,CAAC,iBAAK;AAAA,aAAI,CAACM,KAAL;AAAN,MAApB;AAAD,KAAwC,EAAxC,CAArC;AACA,MAAMnC,KAAK,GAAGZ,OAAO,CAAC;AAAA;AAAQgD,cAAQ,EAAE;AAAlB,OAAiCZ,KAAK,CAACxB,KAAvC;AAAD,KAAiD,CAACwB,KAAK,CAACxB,KAAP,CAAjD,CAArB;AAEA,SACEjB;AAAKiB,SAAK,EAAEA,KAAZ;AAAmBD,aAAS,EAAEyB,KAAK,CAACzB;AAApC,KACEhB;AACEsD,OAAG,EAAEX,YADP;AAEE,oBAAcE,WAFhB;AAGE7B,aAAS,+CAAwCG,OAAO,GAAG,kBAAH,GAAwB,EAAvE,cACP0B,WAAW,GAAG,uBAAH,GAA6B,EADjC;AAHX,KAOE7C;AACEuD,QAAI,EAAC,QADP;AAEEvC,aAAS,EAAC,6BAFZ;AAGEwC,SAAK,EAAEf,KAAK,CAAC3B,WAHf;AAIE2C,WAAO,EAAEN;AAJX,IAPF,EAaEnD;AAAKsD,OAAG,EAAEV,iBAAV;AAA6B5B,aAAS,EAAC,4BAAvC;AAAoE0C,QAAI,EAAC;AAAzE,IAbF,CADF,CADF;AAmBD;;AAED3B,kBAAkB,CAACpB,SAAnBoB,GAA+BpB,SAA/BoB;AACAA,kBAAkB,CAACP,YAAnBO,GAAkCP,YAAlCO;AAEA,eAAe/B,KAAK,CAAC2D,IAAN3D,CAAW+B,kBAAX/B,CAAf","names":["React","useEffect","useCallback","useState","useRef","useMemo","PropTypes","mapboxgl","useMapControl","mapControlDefaultProps","mapControlPropTypes","propTypes","Object","assign","toggleLabel","string","className","style","object","compact","bool","customAttribution","oneOfType","arrayOf","defaultProps","setupAttributioncontrol","opts","map","container","attributionContainer","control","AttributionControl","_map","_container","_innerContainer","_updateAttributions","_updateEditLink","on","_updateData","removeAttributionControl","off","props","context","containerRef","innerContainerRef","showCompact","setShowCompact","current","undefined","viewport","width","toggleAttribution","value","position","ref","type","title","onClick","role","memo"],"sources":["../../../src/components/attribution-control.js"],"sourcesContent":["import * as React from 'react';\nimport {useEffect, useCallback, useState, useRef, useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, {mapControlDefaultProps, mapControlPropTypes} from './use-map-control';\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\n\nconst defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  const control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  // from AttributionControl.onAdd()\n  control._updateAttributions();\n  control._updateEditLink();\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  const {context, containerRef} = useMapControl(props);\n  const innerContainerRef = useRef(null);\n  const [showCompact, setShowCompact] = useState(false);\n\n  useEffect(() => {\n    let control;\n    if (context.map) {\n      control = setupAttributioncontrol(\n        {\n          customAttribution: props.customAttribution\n        },\n        context.map,\n        containerRef.current,\n        innerContainerRef.current\n      );\n    }\n\n    return () => control && removeAttributionControl(control);\n  }, [context.map]);\n\n  const compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n\n  useEffect(() => {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n\n  const toggleAttribution = useCallback(() => setShowCompact(value => !value), []);\n  const style = useMemo(() => ({position: 'absolute', ...props.style}), [props.style]);\n\n  return (\n    <div style={style} className={props.className}>\n      <div\n        ref={containerRef}\n        aria-pressed={showCompact}\n        className={`mapboxgl-ctrl mapboxgl-ctrl-attrib ${compact ? 'mapboxgl-compact' : ''} ${\n          showCompact ? 'mapboxgl-compact-show' : ''\n        }`}\n      >\n        <button\n          type=\"button\"\n          className=\"mapboxgl-ctrl-attrib-button\"\n          title={props.toggleLabel}\n          onClick={toggleAttribution}\n        />\n        <div ref={innerContainerRef} className=\"mapboxgl-ctrl-attrib-inner\" role=\"list\" />\n      </div>\n    </div>\n  );\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\n\nexport default React.memo(AttributionControl);\n"]},"metadata":{},"sourceType":"module"}