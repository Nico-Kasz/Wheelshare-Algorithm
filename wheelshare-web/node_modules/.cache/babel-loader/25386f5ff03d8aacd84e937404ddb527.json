{"ast":null,"code":"const INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}","map":{"version":3,"mappings":"AAMA,MAAMA,WAAW,GAAG,CAApB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,SAAS,GAAG,CAAlB;AACA,MAAMC,eAAe,GAAG;AACtBC,WAAS,EAAEJ,WADW;AAEtBK,WAAS,EAAEJ,UAFW;AAGtBK,SAAO,EAAEJ;AAHa,CAAxB;;AAYA,SAASK,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8B;AAC5B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAID,OAAO,CAACD,KAAK,CAACE,CAAD,CAAN,CAAX,EAAuB;AACrB,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;;AAGD,OAAO,SAASE,wBAAT,CAAkCC,iBAAlC,EAAqD;AAC1D,QAAMC,UAAU,GAAGD,iBAAiB,CAACE,SAAlBF,CAA4BG,OAA/C;;AAGAH,mBAAiB,CAACE,SAAlBF,CAA4BG,OAA5BH,GAAsC,SAASG,OAAT,CAAiBC,EAAjB,EAAqB;AACzD,UAAMC,KAAK,GAAG,KAAKA,KAAnB;;AAGA,QAAID,EAAE,CAACE,MAAHF,GAAY,CAAZA,IAAiBA,EAAE,CAACG,IAAHH,KAAY,aAAjC,EAAgD;AAC9C,UAAI,CAACV,IAAI,CAACW,KAAD,EAAQG,CAAC,IAAIA,CAAC,CAACC,SAAFD,KAAgBJ,EAAE,CAACK,SAAhC,CAAT,EAAqD;AACnDJ,aAAK,CAACK,IAANL,CAAWD,EAAXC;AACD;AACF;;AAEDJ,cAAU,CAACU,IAAXV,CAAgB,IAAhBA,EAAsBG,EAAtBH;AAVF;AAYD;AAGD,OAAO,SAASW,iBAAT,CAA2BC,UAA3B,EAAuC;AAC5CA,YAAU,CAACX,SAAXW,CAAqBV,OAArBU,GAA+B,SAASV,OAAT,CAAiBC,EAAjB,EAAqB;AAClD,QAAIU,SAAS,GAAGxB,eAAe,CAACc,EAAE,CAACG,IAAJ,CAA/B;;AAGA,QAAIO,SAAS,GAAG3B,WAAZ2B,IAA2BV,EAAE,CAACE,MAAHF,IAAa,CAA5C,EAA+C;AAC7C,WAAKW,OAAL,GAAe,IAAf;AACD;;AAED,QAAID,SAAS,GAAG1B,UAAZ0B,IAA0BV,EAAE,CAACY,KAAHZ,KAAa,CAA3C,EAA8C;AAC5CU,eAAS,GAAGzB,SAAZyB;AACD;;AAGD,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB;AACD;;AAED,QAAID,SAAS,GAAGzB,SAAhB,EAA2B;AACzB,WAAK0B,OAAL,GAAe,KAAf;AACD;;AAED,SAAKE,QAAL,CAAc,KAAKC,OAAnB,EAA4BJ,SAA5B,EAAuC;AACrCK,cAAQ,EAAE,CAACf,EAAD,CAD2B;AAErCgB,qBAAe,EAAE,CAAChB,EAAD,CAFoB;AAGrCiB,iBAAW,EAAE,OAHwB;AAIrCC,cAAQ,EAAElB;AAJ2B,KAAvC;AArBF;AA4BD","names":["INPUT_START","INPUT_MOVE","INPUT_END","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","some","array","predict","i","length","enhancePointerEventInput","PointerEventInput","oldHandler","prototype","handler","ev","store","button","type","e","pointerId","push","call","enhanceMouseInput","MouseInput","eventType","pressed","which","callback","manager","pointers","changedPointers","pointerType","srcEvent"],"sources":["../../../src/utils/hammer-overrides.js"],"sourcesContent":["/**\n * This file contains overrides the default\n * hammer.js functions to add our own utility\n */\n\n/* Hammer.js constants */\nconst INPUT_START = 1;\nconst INPUT_MOVE = 2;\nconst INPUT_END = 4;\nconst MOUSE_INPUT_MAP = {\n  mousedown: INPUT_START,\n  mousemove: INPUT_MOVE,\n  mouseup: INPUT_END\n};\n\n/**\n * Helper function that returns true if any element in an array meets given criteria.\n * Because older browsers do not support `Array.prototype.some`\n * @params array {Array}\n * @params predict {Function}\n */\nfunction some(array, predict) {\n  for (let i = 0; i < array.length; i++) {\n    if (predict(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* eslint-disable no-invalid-this */\nexport function enhancePointerEventInput(PointerEventInput) {\n  const oldHandler = PointerEventInput.prototype.handler;\n\n  // overrides PointerEventInput.handler to accept right mouse button\n  PointerEventInput.prototype.handler = function handler(ev) {\n    const store = this.store;\n\n    // Allow non-left mouse buttons through\n    if (ev.button > 0 && ev.type === 'pointerdown') {\n      if (!some(store, e => e.pointerId === ev.pointerId)) {\n        store.push(ev);\n      }\n    }\n\n    oldHandler.call(this, ev);\n  };\n}\n\n// overrides MouseInput.handler to accept right mouse button\nexport function enhanceMouseInput(MouseInput) {\n  MouseInput.prototype.handler = function handler(ev) {\n    let eventType = MOUSE_INPUT_MAP[ev.type];\n\n    // on start we want to have the mouse button down\n    if (eventType & INPUT_START && ev.button >= 0) {\n      this.pressed = true;\n    }\n\n    if (eventType & INPUT_MOVE && ev.which === 0) {\n      eventType = INPUT_END;\n    }\n\n    // mouse must be down\n    if (!this.pressed) {\n      return;\n    }\n\n    if (eventType & INPUT_END) {\n      this.pressed = false;\n    }\n\n    this.callback(this.manager, eventType, {\n      pointers: [ev],\n      changedPointers: [ev],\n      pointerType: 'mouse',\n      srcEvent: ev\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}