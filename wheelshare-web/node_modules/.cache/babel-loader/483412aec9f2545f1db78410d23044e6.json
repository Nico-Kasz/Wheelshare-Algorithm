{"ast":null,"code":"import Hammer from './utils/hammer';\nexport const RECOGNIZERS = Hammer ? [[Hammer.Pan, {\n  event: 'tripan',\n  pointers: 3,\n  threshold: 0,\n  enable: false\n}], [Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}], [Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null;\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n};\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: ['wheel', 'mousewheel']\n};\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","map":{"version":3,"mappings":"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","names":["Hammer","RECOGNIZERS","Pan","event","pointers","threshold","enable","Rotate","Pinch","Swipe","Press","Tap","taps","RECOGNIZER_COMPATIBLE_MAP","tripan","rotate","pinch","pan","doubletap","anytap","RECOGNIZER_FALLBACK_MAP","BASIC_EVENT_ALIASES","pointerdown","pointermove","pointerup","touchstart","touchmove","touchend","mousedown","mousemove","mouseup","INPUT_EVENT_TYPES","KEY_EVENTS","MOUSE_EVENTS","WHEEL_EVENTS","EVENT_RECOGNIZER_MAP","tap","press","pinchin","pinchout","pinchstart","pinchmove","pinchend","pinchcancel","rotatestart","rotatemove","rotateend","rotatecancel","tripanstart","tripanmove","tripanup","tripandown","tripanleft","tripanright","tripanend","tripancancel","panstart","panmove","panup","pandown","panleft","panright","panend","pancancel","swipe","swipeleft","swiperight","swipeup","swipedown","GESTURE_EVENT_ALIASES","click","anyclick","dblclick","mouseover","mouseout","mouseleave"],"sources":["../../src/constants.js"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport Hammer from './utils/hammer';\n\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS = Hammer\n  ? [\n      [Hammer.Pan, {event: 'tripan', pointers: 3, threshold: 0, enable: false}],\n      [Hammer.Rotate, {enable: false}],\n      [Hammer.Pinch, {enable: false}],\n      [Hammer.Swipe, {enable: false}],\n      [Hammer.Pan, {threshold: 0, enable: false}],\n      [Hammer.Press, {enable: false}],\n      [Hammer.Tap, {event: 'doubletap', taps: 2, enable: false}],\n      // TODO - rename to 'tap' and 'singletap' in the next major release\n      [Hammer.Tap, {event: 'anytap', enable: false}],\n      [Hammer.Tap, {enable: false}]\n    ]\n  : null;\n\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n};\n\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\n\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [\n    // Chrome, Safari\n    'wheel',\n    // IE\n    'mousewheel'\n  ]\n};\n\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};\n"]},"metadata":{},"sourceType":"module"}