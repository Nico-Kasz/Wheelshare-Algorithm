{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport useDraggableControl, { draggableControlDefaultProps, draggableControlPropTypes } from './draggable-control';\nimport { crispPixel } from '../utils/crisp-pixel';\nimport { getTerrainElevation } from '../utils/terrain';\nvar propTypes = Object.assign({}, draggableControlPropTypes, {\n  className: PropTypes.string,\n  longitude: PropTypes.number.isRequired,\n  latitude: PropTypes.number.isRequired,\n  style: PropTypes.object\n});\nvar defaultProps = Object.assign({}, draggableControlDefaultProps, {\n  className: ''\n});\n\nfunction getPosition(_ref) {\n  var props = _ref.props,\n      state = _ref.state,\n      context = _ref.context;\n  var longitude = props.longitude,\n      latitude = props.latitude,\n      offsetLeft = props.offsetLeft,\n      offsetTop = props.offsetTop;\n  var dragPos = state.dragPos,\n      dragOffset = state.dragOffset;\n  var viewport = context.viewport,\n      map = context.map;\n\n  if (dragPos && dragOffset) {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  var altitude = getTerrainElevation(map, {\n    longitude: longitude,\n    latitude: latitude\n  });\n\n  var _viewport$project = viewport.project([longitude, latitude, altitude]),\n      _viewport$project2 = _slicedToArray(_viewport$project, 2),\n      x = _viewport$project2[0],\n      y = _viewport$project2[1];\n\n  x += offsetLeft;\n  y += offsetTop;\n  return [x, y];\n}\n\nfunction Marker(props) {\n  var thisRef = useDraggableControl(props);\n  var state = thisRef.state,\n      containerRef = thisRef.containerRef;\n  var children = props.children,\n      className = props.className,\n      draggable = props.draggable,\n      style = props.style;\n  var dragPos = state.dragPos;\n\n  var _getPosition = getPosition(thisRef),\n      _getPosition2 = _slicedToArray(_getPosition, 2),\n      x = _getPosition2[0],\n      y = _getPosition2[1];\n\n  var transform = \"translate(\".concat(crispPixel(x), \"px, \").concat(crispPixel(y), \"px)\");\n  var cursor = draggable ? dragPos ? 'grabbing' : 'grab' : 'auto';\n  var control = useMemo(function () {\n    var containerStyle = _objectSpread({\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform: transform,\n      cursor: cursor\n    }, style);\n\n    return React.createElement(\"div\", {\n      className: \"mapboxgl-marker \".concat(className),\n      ref: thisRef.containerRef,\n      style: containerStyle\n    }, children);\n  }, [children, className]);\n  var container = containerRef.current;\n\n  if (container) {\n    container.style.transform = transform;\n    container.style.cursor = cursor;\n  }\n\n  return control;\n}\n\nMarker.defaultProps = defaultProps;\nMarker.propTypes = propTypes;\nexport default React.memo(Marker);","map":{"version":3,"mappings":"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","names":["React","useMemo","PropTypes","useDraggableControl","draggableControlDefaultProps","draggableControlPropTypes","crispPixel","getTerrainElevation","propTypes","Object","assign","className","string","longitude","number","isRequired","latitude","style","object","defaultProps","getPosition","props","state","context","offsetLeft","offsetTop","dragPos","dragOffset","viewport","map","altitude","project","x","y","Marker","thisRef","containerRef","children","draggable","transform","cursor","control","containerStyle","position","left","top","ref","container","current","memo"],"sources":["../../../src/components/marker.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport * as React from 'react';\nimport {useMemo} from 'react';\nimport * as PropTypes from 'prop-types';\nimport useDraggableControl, {\n  draggableControlDefaultProps,\n  draggableControlPropTypes\n} from './draggable-control';\nimport {crispPixel} from '../utils/crisp-pixel';\nimport {getTerrainElevation} from '../utils/terrain';\n\nconst propTypes = Object.assign({}, draggableControlPropTypes, {\n  // Custom className\n  className: PropTypes.string,\n  // Longitude of the anchor point\n  longitude: PropTypes.number.isRequired,\n  // Latitude of the anchor point\n  latitude: PropTypes.number.isRequired,\n  // Custom style\n  style: PropTypes.object\n});\n\nconst defaultProps = Object.assign({}, draggableControlDefaultProps, {\n  className: ''\n});\n\nfunction getPosition({props, state, context}) {\n  const {longitude, latitude, offsetLeft, offsetTop} = props;\n  const {dragPos, dragOffset} = state;\n  const {viewport, map} = context;\n\n  // If dragging, just return the current drag position\n  if (dragPos && dragOffset) {\n    return [dragPos[0] + dragOffset[0], dragPos[1] + dragOffset[1]];\n  }\n\n  const altitude = getTerrainElevation(map, {longitude, latitude});\n\n  // Otherwise return the projected lat/lng with offset\n  let [x, y] = viewport.project([longitude, latitude, altitude]);\n  x += offsetLeft;\n  y += offsetTop;\n  return [x, y];\n}\n\n/*\n * PureComponent doesn't update when context changes.\n * The only way is to implement our own shouldComponentUpdate here. Considering\n * the parent component (StaticMap or InteractiveMap) is pure, and map re-render\n * is almost always triggered by a viewport change, we almost definitely need to\n * recalculate the marker's position when the parent re-renders.\n */\nfunction Marker(props) {\n  const thisRef = useDraggableControl(props);\n  const {state, containerRef} = thisRef;\n\n  const {children, className, draggable, style} = props;\n  const {dragPos} = state;\n\n  const [x, y] = getPosition(thisRef);\n  const transform = `translate(${crispPixel(x)}px, ${crispPixel(y)}px)`;\n  const cursor = draggable ? (dragPos ? 'grabbing' : 'grab') : 'auto';\n\n  // Perf: avoid rerendering if only the viewport changed\n  const control = useMemo(() => {\n    const containerStyle = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      transform,\n      cursor,\n      ...style\n    };\n\n    return (\n      <div\n        className={`mapboxgl-marker ${className}`}\n        ref={thisRef.containerRef}\n        // @ts-ignore\n        style={containerStyle}\n      >\n        {children}\n      </div>\n    );\n  }, [children, className]);\n\n  const container = containerRef.current;\n  if (container) {\n    container.style.transform = transform;\n    container.style.cursor = cursor;\n  }\n\n  return control;\n}\n\nMarker.defaultProps = defaultProps;\nMarker.propTypes = propTypes;\n\nexport default React.memo(Marker);\n"]},"metadata":{},"sourceType":"module"}