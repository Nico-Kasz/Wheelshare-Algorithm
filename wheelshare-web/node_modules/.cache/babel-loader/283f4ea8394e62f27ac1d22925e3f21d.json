{"ast":null,"code":"import { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nexport default class WebMercatorViewport {\n  constructor() {\n    let {\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = null,\n      fovy = null,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    };\n    width = width || 1;\n    height = height || 1;\n\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    const distanceScales = getDistanceScales({\n      longitude,\n      latitude\n    });\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {\n      width,\n      height,\n      projectionMatrix,\n      viewMatrix\n    } = this;\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n    const m = createMat4();\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n    const mInverse = mat4.invert(createMat4(), m);\n\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n  }\n\n  project(xyz) {\n    let {\n      topLeft = true\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  unproject(xyz) {\n    let {\n      topLeft = true,\n      targetZ = undefined\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  getMapCenterByLngLatPosition(_ref) {\n    let {\n      lngLat,\n      pos\n    } = _ref;\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n    return worldToLngLat(newCenter);\n  }\n\n  getLocationAtPoint(_ref2) {\n    let {\n      lngLat,\n      pos\n    } = _ref2;\n    return this.getMapCenterByLngLatPosition({\n      lngLat,\n      pos\n    });\n  }\n\n  fitBounds(bounds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      width,\n      height\n    } = this;\n    const {\n      longitude,\n      latitude,\n      zoom\n    } = fitBounds(Object.assign({\n      width,\n      height,\n      bounds\n    }, options));\n    return new WebMercatorViewport({\n      width,\n      height,\n      longitude,\n      latitude,\n      zoom\n    });\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n    const west = Math.min(...corners.map(p => p[0]));\n    const east = Math.max(...corners.map(p => p[0]));\n    const south = Math.min(...corners.map(p => p[1]));\n    const north = Math.max(...corners.map(p => p[1]));\n    return [[west, south], [east, north]];\n  }\n\n  getBoundingRegion() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return getBounds(this, options.z || 0);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","width","height","latitude","longitude","zoom","pitch","bearing","altitude","fovy","position","nearZMultiplier","farZMultiplier","scale","Math","max","distanceScales","center","add","mul","unitsPerMeter","projectionMatrix","viewMatrix","meterOffset","_initMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","undefined","z","targetZWorld","X","Y","Z","Number","isFinite","metersPerUnit","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","getLocationAtPoint","bounds","options","assign","corners","getBoundingRegion","west","min","map","p","east","south","north"],"sources":["../../src/web-mercator-viewport.js"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = null,\n      fovy = null,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}