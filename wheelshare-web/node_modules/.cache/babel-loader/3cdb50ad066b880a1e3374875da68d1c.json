{"ast":null,"code":"export var ANCHOR_POSITION = {\n  top: {\n    x: 0.5,\n    y: 0\n  },\n  'top-left': {\n    x: 0,\n    y: 0\n  },\n  'top-right': {\n    x: 1,\n    y: 0\n  },\n  bottom: {\n    x: 0.5,\n    y: 1\n  },\n  'bottom-left': {\n    x: 0,\n    y: 1\n  },\n  'bottom-right': {\n    x: 1,\n    y: 1\n  },\n  left: {\n    x: 0,\n    y: 0.5\n  },\n  right: {\n    x: 1,\n    y: 0.5\n  }\n};\nvar ANCHOR_TYPES = Object.keys(ANCHOR_POSITION);\nexport function getDynamicPosition(_ref) {\n  var x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height,\n      selfWidth = _ref.selfWidth,\n      selfHeight = _ref.selfHeight,\n      anchor = _ref.anchor,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 0 : _ref$padding;\n  var _ANCHOR_POSITION$anch = ANCHOR_POSITION[anchor],\n      anchorX = _ANCHOR_POSITION$anch.x,\n      anchorY = _ANCHOR_POSITION$anch.y;\n  var top = y - anchorY * selfHeight;\n  var bottom = top + selfHeight;\n  var cutoffY = Math.max(0, padding - top) + Math.max(0, bottom - height + padding);\n\n  if (cutoffY > 0) {\n    var bestAnchorY = anchorY;\n    var minCutoff = cutoffY;\n\n    for (anchorY = 0; anchorY <= 1; anchorY += 0.5) {\n      top = y - anchorY * selfHeight;\n      bottom = top + selfHeight;\n      cutoffY = Math.max(0, padding - top) + Math.max(0, bottom - height + padding);\n\n      if (cutoffY < minCutoff) {\n        minCutoff = cutoffY;\n        bestAnchorY = anchorY;\n      }\n    }\n\n    anchorY = bestAnchorY;\n  }\n\n  var xStep = 0.5;\n\n  if (anchorY === 0.5) {\n    anchorX = Math.floor(anchorX);\n    xStep = 1;\n  }\n\n  var left = x - anchorX * selfWidth;\n  var right = left + selfWidth;\n  var cutoffX = Math.max(0, padding - left) + Math.max(0, right - width + padding);\n\n  if (cutoffX > 0) {\n    var bestAnchorX = anchorX;\n    var _minCutoff = cutoffX;\n\n    for (anchorX = 0; anchorX <= 1; anchorX += xStep) {\n      left = x - anchorX * selfWidth;\n      right = left + selfWidth;\n      cutoffX = Math.max(0, padding - left) + Math.max(0, right - width + padding);\n\n      if (cutoffX < _minCutoff) {\n        _minCutoff = cutoffX;\n        bestAnchorX = anchorX;\n      }\n    }\n\n    anchorX = bestAnchorX;\n  }\n\n  return ANCHOR_TYPES.find(function (positionType) {\n    var anchorPosition = ANCHOR_POSITION[positionType];\n    return anchorPosition.x === anchorX && anchorPosition.y === anchorY;\n  }) || anchor;\n}","map":{"version":3,"mappings":"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","names":["ANCHOR_POSITION","top","x","y","bottom","left","right","ANCHOR_TYPES","Object","keys","getDynamicPosition","width","height","selfWidth","selfHeight","anchor","padding","anchorX","anchorY","cutoffY","Math","max","bestAnchorY","minCutoff","xStep","floor","cutoffX","bestAnchorX","find","anchorPosition","positionType"],"sources":["../../../src/utils/dynamic-position.js"],"sourcesContent":["export const ANCHOR_POSITION = {\n  top: {x: 0.5, y: 0},\n  'top-left': {x: 0, y: 0},\n  'top-right': {x: 1, y: 0},\n  bottom: {x: 0.5, y: 1},\n  'bottom-left': {x: 0, y: 1},\n  'bottom-right': {x: 1, y: 1},\n  left: {x: 0, y: 0.5},\n  right: {x: 1, y: 0.5}\n};\n\nconst ANCHOR_TYPES = Object.keys(ANCHOR_POSITION);\n\n/**\n * Calculate the dynamic position for a popup to fit in a container.\n * @param {Object} opts\n * @param {Number} opts.x - x position of the anchor on screen\n * @param {Number} opts.y - y position of the anchor on screen\n * @param {Number} opts.width - width of the container\n * @param {Number} opts.height - height of the container\n * @param {Number} opts.padding - extra space from the edge in pixels\n * @param {Number} opts.selfWidth - width of the popup\n * @param {Number} opts.selfHeight - height of the popup\n * @param {String} opts.anchor - type of the anchor, one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n * @returns {String} position - one of 'top', 'bottom',\n    'left', 'right', 'top-left', 'top-right', 'bottom-left' , and  'bottom-right'\n */\n// eslint-disable-next-line complexity,max-statements\nexport function getDynamicPosition({\n  x,\n  y,\n  width,\n  height,\n  selfWidth,\n  selfHeight,\n  anchor,\n  padding = 0\n}) {\n  let {x: anchorX, y: anchorY} = ANCHOR_POSITION[anchor];\n\n  // anchorY: top - 0, center - 0.5, bottom - 1\n  let top = y - anchorY * selfHeight;\n  let bottom = top + selfHeight;\n  let cutoffY = Math.max(0, padding - top) + Math.max(0, bottom - height + padding);\n\n  if (cutoffY > 0) {\n    // Needs vertical adjustment\n    let bestAnchorY = anchorY;\n    let minCutoff = cutoffY;\n    // Test anchorY at 0.5 step between [0, 1]\n    for (anchorY = 0; anchorY <= 1; anchorY += 0.5) {\n      top = y - anchorY * selfHeight;\n      bottom = top + selfHeight;\n      cutoffY = Math.max(0, padding - top) + Math.max(0, bottom - height + padding);\n      if (cutoffY < minCutoff) {\n        minCutoff = cutoffY;\n        bestAnchorY = anchorY;\n      }\n    }\n    anchorY = bestAnchorY;\n  }\n\n  // If needed, adjust anchorX at 0.5 step between [0, 1]\n  let xStep = 0.5;\n  if (anchorY === 0.5) {\n    // If y is centered, then x cannot also be centered\n    anchorX = Math.floor(anchorX);\n    xStep = 1;\n  }\n\n  // anchorX: left - 0, center - 0.5, right - 1\n  let left = x - anchorX * selfWidth;\n  let right = left + selfWidth;\n  let cutoffX = Math.max(0, padding - left) + Math.max(0, right - width + padding);\n\n  if (cutoffX > 0) {\n    // Needs horizontal adjustment\n    let bestAnchorX = anchorX;\n    let minCutoff = cutoffX;\n    // Test anchorX at xStep between [0, 1]\n    for (anchorX = 0; anchorX <= 1; anchorX += xStep) {\n      left = x - anchorX * selfWidth;\n      right = left + selfWidth;\n      cutoffX = Math.max(0, padding - left) + Math.max(0, right - width + padding);\n      if (cutoffX < minCutoff) {\n        minCutoff = cutoffX;\n        bestAnchorX = anchorX;\n      }\n    }\n    anchorX = bestAnchorX;\n  }\n\n  // Find the name of the new anchor position\n  return (\n    ANCHOR_TYPES.find(positionType => {\n      const anchorPosition = ANCHOR_POSITION[positionType];\n      return anchorPosition.x === anchorX && anchorPosition.y === anchorY;\n    }) || anchor\n  );\n}\n"]},"metadata":{},"sourceType":"module"}