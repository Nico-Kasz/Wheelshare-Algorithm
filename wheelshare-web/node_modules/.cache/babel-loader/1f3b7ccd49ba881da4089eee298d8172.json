{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\huyfu\\\\Wheelshare-Algorithm\\\\wheelshare-web\\\\src\\\\Components\\\\Map.js\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport ReactMapGL, { GeolocateControl, Marker, Source, Layer } from 'react-map-gl';\nimport { heatmapLayer } from './heatmap';\nimport Pin from './Pin'; // Constants Imports\n\nimport { API, TOKEN } from \"./constants\";\nvar heatmapOn = false;\n\nconst heatmapData = require('../Assets/Geojsons/4.20.22 gps data.geojson'); // {name: _, address: _, longitude: _, latitude: _}\n\n\nconst Markers = [{\n  name: \"StartMarker\"\n}, {\n  name: \"EndMarker\"\n}, {\n  latitude: 39.50882818527073,\n  longitude: -84.73455522976074,\n  name: \"TestMarker\"\n}];\n\nconst setStartAddress = address => {\n  Markers[0].address = address;\n};\n\nconst setEndAddress = address => {\n  Markers[1].address = address;\n};\n\nconst DisplayHeatmap = () => {\n  if (heatmapOn) return heatmapData && /*#__PURE__*/React.createElement(Source, {\n    type: \"geojson\",\n    data: heatmapData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, heatmapLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  })));\n};\n\nconst DisplayMarkers = () => {\n  return Markers.map(function (marker) {\n    if (!('latitude' in marker && 'longitude' in marker)) {\n      if ('address' in marker) // Forward Geocode - TODO - Async Wait => set marker\n        //marker = GetLocationByAddress(marker.address).then();\n        ;else // Blank marker - nothing to display\n        ;\n    } //Since GeoCoding doesnt work as of now, a return is put in place to prevent crashing\n    // Marker on drag event => moves to location it is dropped at - TODO - throws exception\n\n\n    const markerOnDragEvent = ev => {\n      marker = {\n        name: marker.name,\n        address: marker.address,\n        longitude: ev.lngLat[0],\n        latitude: ev.lngLat[1]\n      }; //marker.longitude = ev.lngLat[0];\n      //marker.latitude =  ev.lngLat[1];\n    };\n\n    return /*#__PURE__*/React.createElement(Marker, {\n      className: 'name' in marker ? marker.name : \"Marker\",\n      longitude: 'longitude' in marker ? marker.longitude : 0 // The in statements are placeholders\n      ,\n      latitude: 'latitude' in marker ? marker.latitude : 0,\n      anchor: \"bottom\",\n      key: marker.name,\n      pitchAlignment: \"map\",\n      draggable: true,\n      onDragEnd: ev => marker = markerOnDragEvent(marker, ev),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Pin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }));\n  });\n};\n\nconst GetLocationByAddress = function (address) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Marker\";\n  fetch(API + encodeURIComponent(address) + '.json?access_token=' + TOKEN).then(resp => resp.json()).then(json => {\n    if (json.features[0] !== undefined) // Just incase\n      return {\n        name: name,\n        address: address,\n        longitude: json.features[0].center[0],\n        latitude: json.features[0].center[1]\n      };\n  });\n};\n\nexport default function Map() {\n  const [viewport, setViewport] = useState({\n    width: '100vw',\n    height: '100vh',\n    hash: true,\n    latitude: 39.50882818527073,\n    longitude: -84.73455522976074,\n    zoom: 14,\n    maxZoom: 20,\n    minPitch: 0,\n    maxPitch: 30\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReactMapGL, Object.assign({}, viewport, {\n    mapboxApiAccessToken: TOKEN,\n    mapStyle: \"mapbox://styles/nicokasz/ckz23hv99001w14qmii9m7ac4\",\n    onViewportChange: viewport => {\n      setViewport(viewport);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }), DisplayHeatmap(), DisplayMarkers(), /*#__PURE__*/React.createElement(GeolocateControl, {\n    trackUserLocation: true,\n    maxZoom: 22,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/huyfu/Wheelshare-Algorithm/wheelshare-web/src/Components/Map.js"],"names":["React","useState","ReactMapGL","GeolocateControl","Marker","Source","Layer","heatmapLayer","Pin","API","TOKEN","heatmapOn","heatmapData","require","Markers","name","latitude","longitude","setStartAddress","address","setEndAddress","DisplayHeatmap","DisplayMarkers","map","marker","markerOnDragEvent","ev","lngLat","GetLocationByAddress","fetch","encodeURIComponent","then","resp","json","features","undefined","center","Map","viewport","setViewport","width","height","hash","zoom","maxZoom","minPitch","maxPitch"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { useState} from 'react';\r\nimport ReactMapGL, { GeolocateControl, Marker, Source, Layer } from 'react-map-gl';\r\nimport {heatmapLayer} from './heatmap';\r\nimport Pin from './Pin';\r\n\r\n// Constants Imports\r\nimport { API, TOKEN } from \"./constants\";\r\n\r\n\r\n\r\n\r\nvar heatmapOn = false;\r\nconst heatmapData =  require('../Assets/Geojsons/4.20.22 gps data.geojson');\r\n\r\n// {name: _, address: _, longitude: _, latitude: _}\r\nconst Markers = [{name: \"StartMarker\"}, {name: \"EndMarker\"}, {latitude: 39.50882818527073, longitude: -84.73455522976074, name: \"TestMarker\"}];\r\n\r\nconst setStartAddress   = (address) => {Markers[0].address = address;}\r\nconst setEndAddress     = (address) => {Markers[1].address = address;}\r\n\r\n\r\nconst DisplayHeatmap = () => {\r\n    if (heatmapOn)\r\n        return (\r\n            heatmapData && (\r\n            <Source type=\"geojson\" data={heatmapData}>\r\n            <Layer {...heatmapLayer}/>\r\n            </Source>)\r\n        )\r\n}\r\n\r\n\r\nconst DisplayMarkers = () => {\r\n    return Markers.map(function (marker) {\r\n        if (!('latitude' in marker && 'longitude' in marker)) {\r\n            if ('address' in marker)\r\n                // Forward Geocode - TODO - Async Wait => set marker\r\n                //marker = GetLocationByAddress(marker.address).then();\r\n                ;\r\n            else\r\n                // Blank marker - nothing to display\r\n                ;\r\n        }\r\n        //Since GeoCoding doesnt work as of now, a return is put in place to prevent crashing\r\n        \r\n\r\n\r\n        // Marker on drag event => moves to location it is dropped at - TODO - throws exception\r\n        const markerOnDragEvent = (ev) => {\r\n            marker = {name: marker.name, address: marker.address, longitude: ev.lngLat[0], latitude: ev.lngLat[1]};\r\n            //marker.longitude = ev.lngLat[0];\r\n            //marker.latitude =  ev.lngLat[1];\r\n        }\r\n\r\n        return(\r\n            <Marker \r\n                className={'name' in marker ? marker.name : \"Marker\"}\r\n                longitude={'longitude' in marker? marker.longitude : 0}  // The in statements are placeholders\r\n                latitude={'latitude' in marker? marker.latitude : 0} \r\n                anchor=\"bottom\"\r\n                key = {marker.name}\r\n                pitchAlignment= 'map'\r\n                draggable={true}\r\n                onDragEnd={ ev => marker = markerOnDragEvent(marker, ev)}>\r\n                <Pin/> \r\n            </Marker>)\r\n        }\r\n    );\r\n\r\n}\r\n\r\nconst GetLocationByAddress  = (address, name = \"Marker\") => {\r\n    fetch(API + encodeURIComponent(address) + '.json?access_token=' + TOKEN)\r\n            .then(resp => resp.json())\r\n            .then(json => {\r\n                if (json.features[0] !== undefined)           // Just incase\r\n                    return {name: name, address: address, longitude: json.features[0].center[0], latitude: json.features[0].center[1]};\r\n            })\r\n}\r\n\r\n\r\n\r\nexport default function Map() {\r\n        const [viewport, setViewport] = useState({\r\n            width: '100vw',\r\n            height: '100vh',\r\n            hash: true,\r\n            latitude: 39.50882818527073,\r\n            longitude: -84.73455522976074,\r\n            zoom: 14,\r\n            maxZoom: 20,\r\n            minPitch: 0,\r\n            maxPitch: 30\r\n        });\r\n        \r\n\r\n        return (\r\n            <div>\r\n                \r\n                <ReactMapGL\r\n                    {...viewport}\r\n                    mapboxApiAccessToken={TOKEN}\r\n                    mapStyle=\"mapbox://styles/nicokasz/ckz23hv99001w14qmii9m7ac4\"\r\n                    onViewportChange={(viewport) => { setViewport(viewport); }}\r\n                >\r\n\r\n                {DisplayHeatmap()}\r\n\r\n                {DisplayMarkers()}\r\n                    \r\n                <GeolocateControl trackUserLocation={true} maxZoom={22}/>\r\n                    \r\n                </ReactMapGL>\r\n            </div>\r\n            );\r\n}"]},"metadata":{},"sourceType":"module"}