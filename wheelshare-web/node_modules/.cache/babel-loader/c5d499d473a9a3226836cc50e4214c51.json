{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport * as PropTypes from 'prop-types';\nimport useMapControl, { mapControlPropTypes } from '../components/use-map-control';\nvar pixelRatio = typeof window !== 'undefined' && window.devicePixelRatio || 1;\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  redraw: PropTypes.func.isRequired\n});\nvar defaultProps = {\n  captureScroll: false,\n  captureDrag: false,\n  captureClick: false,\n  captureDoubleClick: false,\n  capturePointerMove: false\n};\n\nfunction CanvasOverlay(props) {\n  var _useMapControl = useMapControl(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      ctx = _useState2[0],\n      setDrawingContext = _useState2[1];\n\n  useEffect(function () {\n    setDrawingContext(containerRef.current.getContext('2d'));\n  }, []);\n  var viewport = context.viewport,\n      isDragging = context.isDragging;\n\n  if (ctx) {\n    ctx.save();\n    ctx.scale(pixelRatio, pixelRatio);\n    props.redraw({\n      width: viewport.width,\n      height: viewport.height,\n      ctx: ctx,\n      isDragging: isDragging,\n      project: viewport.project,\n      unproject: viewport.unproject\n    });\n    ctx.restore();\n  }\n\n  return React.createElement(\"canvas\", {\n    ref: containerRef,\n    width: viewport.width * pixelRatio,\n    height: viewport.height * pixelRatio,\n    style: {\n      width: \"\".concat(viewport.width, \"px\"),\n      height: \"\".concat(viewport.height, \"px\"),\n      position: 'absolute',\n      left: 0,\n      top: 0\n    }\n  });\n}\n\nCanvasOverlay.propTypes = propTypes;\nCanvasOverlay.defaultProps = defaultProps;\nexport default CanvasOverlay;","map":{"version":3,"mappings":";AAoBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,aAAP,IAAuBC,mBAAvB,QAAiD,+BAAjD;AAGA,IAAMC,UAAU,GAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,gBAAxC,IAA6D,CAAjF;AAEA,IAAMC,SAAS,GAAGC,MAAM,CAACC,MAAPD,CAAc,EAAdA,EAAkBL,mBAAlBK,EAAuC;AACvDE,QAAM,EAAET,SAAS,CAACU,IAAVV,CAAeW;AADgC,CAAvCJ,CAAlB;AAIA,IAAMK,YAAY,GAAG;AACnBC,eAAa,EAAE,KADI;AAEnBC,aAAW,EAAE,KAFM;AAGnBC,cAAY,EAAE,KAHK;AAInBC,oBAAkB,EAAE,KAJD;AAKnBC,oBAAkB,EAAE;AALD,CAArB;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,uBACIlB,aAAa,CAACkB,KAAD,CADjB;AAAA,MACrBC,OADqB,kBACrBA,OADqB;AAAA,MACZC,YADY,kBACZA,YADY;;AAAA,kBAEKvB,QAAQ,CAAC,IAAD,CAFb;AAAA;AAAA,MAErBwB,GAFqB;AAAA,MAEhBC,iBAFgB;;AAI5BxB,WAAS,CAAC,YAAM;AACdwB,qBAAiB,CAACF,YAAY,CAACG,OAAbH,CAAqBI,UAArBJ,CAAgC,IAAhCA,CAAD,CAAjBE;AADO,KAEN,EAFM,CAATxB;AAJ4B,MAQrB2B,QARqB,GAQGN,OARH,CAQrBM,QARqB;AAAA,MAQXC,UARW,GAQGP,OARH,CAQXO,UARW;;AAU5B,MAAIL,GAAJ,EAAS;AACPA,OAAG,CAACM,IAAJN;AACAA,OAAG,CAACO,KAAJP,CAAUnB,UAAVmB,EAAsBnB,UAAtBmB;AAEAH,SAAK,CAACV,MAANU,CAAa;AACXW,WAAK,EAAEJ,QAAQ,CAACI,KADL;AAEXC,YAAM,EAAEL,QAAQ,CAACK,MAFN;AAGXT,SAAG,EAAHA,GAHW;AAIXK,gBAAU,EAAVA,UAJW;AAKXK,aAAO,EAAEN,QAAQ,CAACM,OALP;AAMXC,eAAS,EAAEP,QAAQ,CAACO;AANT,KAAbd;AASAG,OAAG,CAACY,OAAJZ;AACD;;AAED,SACEzB;AACEsC,OAAG,EAAEd,YADP;AAEES,SAAK,EAAEJ,QAAQ,CAACI,KAATJ,GAAiBvB,UAF1B;AAGE4B,UAAM,EAAEL,QAAQ,CAACK,MAATL,GAAkBvB,UAH5B;AAIEiC,SAAK,EAAE;AACLN,WAAK,YAAKJ,QAAQ,CAACI,KAAd,OADA;AAELC,YAAM,YAAKL,QAAQ,CAACK,MAAd,OAFD;AAGLM,cAAQ,EAAE,UAHL;AAILC,UAAI,EAAE,CAJD;AAKLC,SAAG,EAAE;AALA;AAJT,IADF;AAcD;;AAEDrB,aAAa,CAACZ,SAAdY,GAA0BZ,SAA1BY;AACAA,aAAa,CAACN,YAAdM,GAA6BN,YAA7BM;AAEA,eAAeA,aAAf","names":["React","useState","useEffect","PropTypes","useMapControl","mapControlPropTypes","pixelRatio","window","devicePixelRatio","propTypes","Object","assign","redraw","func","isRequired","defaultProps","captureScroll","captureDrag","captureClick","captureDoubleClick","capturePointerMove","CanvasOverlay","props","context","containerRef","ctx","setDrawingContext","current","getContext","viewport","isDragging","save","scale","width","height","project","unproject","restore","ref","style","position","left","top"],"sources":["../../../src/overlays/canvas-overlay.js"],"sourcesContent":["// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as React from 'react';\nimport {useState, useEffect} from 'react';\nimport * as PropTypes from 'prop-types';\nimport useMapControl, {mapControlPropTypes} from '../components/use-map-control';\n\n/* global window */\nconst pixelRatio = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\nconst propTypes = Object.assign({}, mapControlPropTypes, {\n  redraw: PropTypes.func.isRequired\n});\n\nconst defaultProps = {\n  captureScroll: false,\n  captureDrag: false,\n  captureClick: false,\n  captureDoubleClick: false,\n  capturePointerMove: false\n};\n\nfunction CanvasOverlay(props) {\n  const {context, containerRef} = useMapControl(props);\n  const [ctx, setDrawingContext] = useState(null);\n\n  useEffect(() => {\n    setDrawingContext(containerRef.current.getContext('2d'));\n  }, []);\n\n  const {viewport, isDragging} = context;\n\n  if (ctx) {\n    ctx.save();\n    ctx.scale(pixelRatio, pixelRatio);\n\n    props.redraw({\n      width: viewport.width,\n      height: viewport.height,\n      ctx,\n      isDragging,\n      project: viewport.project,\n      unproject: viewport.unproject\n    });\n\n    ctx.restore();\n  }\n\n  return (\n    <canvas\n      ref={containerRef}\n      width={viewport.width * pixelRatio}\n      height={viewport.height * pixelRatio}\n      style={{\n        width: `${viewport.width}px`,\n        height: `${viewport.height}px`,\n        position: 'absolute',\n        left: 0,\n        top: 0\n      }}\n    />\n  );\n}\n\nCanvasOverlay.propTypes = propTypes;\nCanvasOverlay.defaultProps = defaultProps;\n\nexport default CanvasOverlay;\n"]},"metadata":{},"sourceType":"module"}